BFS

from collections import defaultdict

class Graph:
  def __init__(self,vertices):
    self.V=vertices
    self.graph=defaultdict(list)
  def addedges(self,u,v):
    self.graph[u].append(v)
  def BFS(self,u):
    visited=[False]*self.V
    queue=[]
    queue.append(u)
    visited[u]=True
    while queue:
       s=queue.pop(0)
       print(s)
       for i in self.graph[s]:
           if not visited[i]:
              queue.append(i)
              visited[i]=True

g=Graph(4)
g.addedges(2,0)
g.addedges(0,2)
g.addedges(2,3)
g.addedges(3,3)
g.addedges(1,2)
g.addedges(0,1)
g.BFS(2)


DFS iterative:

from collections import defaultdict

class Graph:
  def __init__(self,vertices):
     self.V=vertices
     self.graph=defaultdict(list)
  def addedges(self,u,v):
     self.graph[u].append(v)
  def DFS(self,u):
     stack=[]
     visited=[False]*self.V
     stack.append(u)
     while stack:
       s=stack.pop()
       if not visited[s]:
          visited[s]=True
          print(s)
       for i in self.graph[s]:
          if not visited[i]:
             stack.append(i)

s=Graph(4)
g.addedges(2,0)
g.addedges(0,2)
g.addedges(2,3)
g.addedges(3,3)
g.addedges(1,2)
g.addedges(0,1)
g.DFS(2)




DFS recursive:

from collections import defaultdict

class Graph:
  def __init__(self,vertices):
    self.V=vertices
    self.graph=defaultdict(list)
  def addedges(self,u,v):
      self.graph[u].append(v)
  def DFSutil(self,visited,u):
      visited[u]=True
      print(u)
      for i in self.graph[u]:
         if not visited[i]:
            self.DFSutil(visited,i)
  def DFS(self,u):
     visited=[False]*self.V
     self.DFSutil(visited,u)
g=Graph(4)
g.addedges(2,0)
g.addedges(0,2)
g.addedges(1,2)
g.addedges(0,1)
g.addedges(2,3)
g.addedges(3,3)
g.DFS(2)



Find all path from source to destination:

from collections import defaultdict

class Graph:
  def __init__(self,vertices):
    self.V=vertices
    self.graph=defaultdict(list)
  def addedges(self,u,v):
     self.graph[u].append(v)
  def find_path(self,u,v):
     visited=[False]*self.V
     path=[]
     self.find_path_util(visited,path,u,v)
  def find_path_util(self,visited,path,u,v):
     visited[u]=True
     path.append(u)
     if u==v:
        print(path)
     else:
        for i in self.graph[u]:
            if not visited[i]:
               self.find_path_util(visited,path,i,v)
     path.pop()
     visited[u]=False

g=Graph(4)
g.addedges(2,0)
g.addedges(0,2)
g.addedges(1,3)
g.addedges(2,1)
g.addedges(0,1)
g.addedges(0,3)
g.find_path(2,3)







