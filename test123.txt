from collections import defaultdict

class Graph:
    def __init__(self,vertices): 
        self.V=vertices
        self.graph=defaultdict(list)   
    def add_edges(self,u,v):
        self.graph[u].append(v)  
    def BFS(self,u):
        queue=[]
        visited=[False]*self.V
        queue.append(u) 
        visited[u]=True  
        while queue:
            s=queue.pop(0)
            print(s)
            for i in self.graph[s]:
                if not visited[i]:
                    queue.append(i)
                    visited[i]=True
    def DFS(self,u):
        visited=[False]*self.V
        self.DFS_util(visited,u)
    def DFS_util(self,visited,u):
        visited[u]=True
        print(u)
        for i in self.graph[u]:
            if not visited[i]:
                self.DFS_util(visited,i)
                    
if __name__=="__main__":
    g=Graph(4)
    g.add_edges(2,0)
    g.add_edges(2,3)
    g.add_edges(0,2)
    g.add_edges(0,1)
    g.add_edges(1,2)
    g.add_edges(3,3)
    g.DFS(2)


DFS_iterative traversal:
-----------------------
from collections import defaultdict

class Graph:
    def __init__(self,vertices): 
        self.V=vertices
        self.graph=defaultdict(list)   
    def add_edges(self,u,v):
        self.graph[u].append(v)  
    def BFS(self,u):
        queue=[]
        visited=[False]*self.V
        queue.append(u) 
        visited[u]=True  
        while queue:
            s=queue.pop(0)
            print(s)
            for i in self.graph[s]:
                if not visited[i]:
                    queue.append(i)
                    visited[i]=True
    def DFS(self,u):
        visited=[False]*self.V
        self.DFS_util(visited,u)
    def DFS_util(self,visited,u):
        visited[u]=True
        print(u)
        for i in self.graph[u]:
            if not visited[i]:
                self.DFS_util(visited,i)
    def DFS_iterative(self,u):
        stack=[]
        visited=[False]*self.V
        stack.append(u)
        while stack:
            s=stack.pop(-1)
            if not visited[s]:
                print(s)
                visited[s]=True
            for i in self.graph[s]:
                if not visited[i]:
                    stack.append(i)
            
                    
if __name__=="__main__":
    g=Graph(4)
    g.add_edges(2,0)
    g.add_edges(2,3)
    g.add_edges(0,2)
    g.add_edges(0,1)
    g.add_edges(1,2)
    g.add_edges(3,3)
    print("Recursive DFS traversal")
    g.DFS(2)
    print("Iterative DFS traversal")
    g.DFS_iterative(2)


Find all path from source to destination:
-----------------------------------------

from collections import defaultdict

class Graph:
    def __init__(self,vertices): 
        self.V=vertices
        self.graph=defaultdict(list)   
    def add_edges(self,u,v):
        self.graph[u].append(v)  
    def BFS(self,u):
        queue=[]
        visited=[False]*self.V
        queue.append(u) 
        visited[u]=True  
        while queue:
            s=queue.pop(0)
            print(s)
            for i in self.graph[s]:
                if not visited[i]:
                    queue.append(i)
                    visited[i]=True
    def DFS(self,u):
        visited=[False]*self.V
        self.DFS_util(visited,u)
    def DFS_util(self,visited,u):
        visited[u]=True
        print(u)
        for i in self.graph[u]:
            if not visited[i]:
                self.DFS_util(visited,i)
    def DFS_iterative(self,u):
        stack=[]
        visited=[False]*self.V
        stack.append(u)
        while stack:
            s=stack.pop(-1)
            if not visited[s]:
                print(s)
                visited[s]=True
            for i in self.graph[s]:
                if not visited[i]:
                    stack.append(i)
    
    def find_all_path_util(self,visited,path,u,v):
        visited[u]=True
        path.append(u)
        if u==v:
            print(path)
        else:
            for i in self.graph[u]:
                if not visited[i]:
                    self.find_all_path_util(visited,path,i,v)
        path.pop()
        visited[u]=False
            
    
    def find_all_path(self,u,v):
        visited=[False]*self.V
        path=[]
        self.find_all_path_util(visited,path,u,v)
            
                    
if __name__=="__main__":
    g=Graph(4)
    g.add_edges(2,0)
    g.add_edges(2,3)
    g.add_edges(0,2)
    g.add_edges(0,1)
    g.add_edges(1,2)
    g.add_edges(3,3)
    print("Recursive DFS traversal")
    g.DFS(2)
    print("Iterative DFS traversal")
    g.DFS_iterative(2)
    print("Find all path from source to target")
    g.find_all_path(2,3)


Find all path from source to destination:
-----------------------------------------

from collections import defaultdict

class Graph:
    def __init__(self,vertices): 
        self.V=vertices
        self.graph=defaultdict(list)   
    def add_edges(self,u,v):
        self.graph[u].append(v)  
    def BFS(self,u):
        queue=[]
        visited=[False]*self.V
        queue.append(u) 
        visited[u]=True  
        while queue:
            s=queue.pop(0)
            print(s)
            for i in self.graph[s]:
                if not visited[i]:
                    queue.append(i)
                    visited[i]=True
    def DFS(self,u):
        visited=[False]*self.V
        self.DFS_util(visited,u)
    def DFS_util(self,visited,u):
        visited[u]=True
        print(u)
        for i in self.graph[u]:
            if not visited[i]:
                self.DFS_util(visited,i)
    def DFS_iterative(self,u):
        stack=[]
        visited=[False]*self.V
        stack.append(u)
        while stack:
            s=stack.pop(-1)
            if not visited[s]:
                print(s)
                visited[s]=True
            for i in self.graph[s]:
                if not visited[i]:
                    stack.append(i)
    
    def find_all_path_util(self,visited,path,u,v):
        visited[u]=True
        path.append(u)
        if u==v:
            print(path)
        else:
            for i in self.graph[u]:
                if not visited[i]:
                    self.find_all_path_util(visited,path,i,v)
        path.pop()
        visited[u]=False
            
    
    def find_all_path(self,u,v):
        visited=[False]*self.V
        path=[]
        self.find_all_path_util(visited,path,u,v)
            
                    
if __name__=="__main__":
    g=Graph(5)
    g.add_edges(2,0)
    g.add_edges(0,2)
    g.add_edges(0,1)
    g.add_edges(2,1)
    g.add_edges(0,3)
    g.add_edges(1,3)
    g.add_edges(1,4)
    g.add_edges(4,3)
    print("Recursive DFS traversal")
    g.DFS(2)
    print("Iterative DFS traversal")
    g.DFS_iterative(2)
    print("Find all path from source to target")
    g.find_all_path(2, 3)

Topological Sorting:
--------------------
from collections import defaultdict

class Graph:
    def __init__(self,vertices):
        self.V=vertices
        self.graph=defaultdict(list)
    def addedges(self,u,v):
        self.graph[u].append(v)
    def topsort_util(self,visited,stack,u):
        visited[u]=True
        for i in self.graph[u]:
            if not visited[i]:
                self.topsort_util(visited,stack,i)
        stack.append(u)
    def topsort(self):
        visited=[False]*self.V
        stack=[]
        for i in range(0,self.V):
            if not visited[i]:
                self.topsort_util(visited,stack,i)
        while stack:
            print(stack.pop())

if __name__=="__main__":
    g=Graph(6)
    g.addedges(2,3)
    g.addedges(2,5)
    g.addedges(3,4)
    g.addedges(5,4)
    g.addedges(4,1)
    g.addedges(3,0)
    g.addedges(0,1)
    g.topsort()


Kahns Algorithm
---------------
from collections import defaultdict

class Graph:
    def __init__(self,vertices):
        self.V=vertices
        self.graph=defaultdict(list)
    def addedges(self,u,v):
        self.graph[u].append(v)
    def top_sort(self):
        in_degree=[0]*self.V
        queue=[]
        count=0
        for i in self.graph:
            for j in self.graph[i]:
                in_degree[j]=in_degree[j]+1
        for i in range(0,self.V):
            if in_degree[i]==0:
                queue.append(i)
        while queue:
            s=queue.pop(0)
            print(s)
            for i in self.graph[s]:
                in_degree[i]=in_degree[i]-1
                if(in_degree[i]==0):
                    queue.append(i)
            count=count+1
        if count==self.V:
            print("Topological sort is possible for this graph")
        else:
            print("There is a cycle in the graph")
            
if __name__=="__main__":
    graph=Graph(5)
    graph.addedges(0,1)
    graph.addedges(1,2)
    graph.addedges(2,3)
    graph.addedges(4,2)
    graph.top_sort()

Detect Cycle in Graph:
---------------------
from collections import defaultdict

class Graph:
    def __init__(self,vertices):
        self.V=vertices
        self.graph=defaultdict(list)
    def addedges(self,u,v):
        self.graph[u].append(v)
    def isCyclic_util(self,visited,recstack,u):
        visited[u]=True
        recstack[u]=True
        for i in self.graph[u]:
            if not visited[i]:
                if self.isCyclic_util(visited, recstack, i):
                    return True
            else:
                if recstack[i]==True:
                    return True
        recstack[u]=False
        return False
    
    def isCyclic(self):
        visited=[False]*self.V
        recstack=[False]*self.V
        for i in range(0,self.V):
            if not visited[i]:
                if self.isCyclic_util(visited, recstack, i):
                    return True
        return False

if __name__=="__main__":
    graph=Graph(5)
    graph.addedges(0,1)
    graph.addedges(0,4)
    graph.addedges(1,2)
    graph.addedges(4,2)
    graph.addedges(2,3)
    print(graph.isCyclic())
        














